<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <template id="supplier_form_template" name="Public Form">
        <form action="/supplier_bid" method="post" id="supplier_order_form">
            <input type="hidden" name="token" t-att-value="token"/>
            <div id="product_details_section">
                <label>Product Details:</label>
                <div id="product_templates_container"></div>
                <button type="button" onclick="addProductTemplate()">Add Product</button>
            </div>

            <div>
                <label>Pick-Up Address:</label>
                <select name="delivery_address" id="delivery_address_dropdown"/>
            </div>
            <div>
                <label for="pickup_address">Optional Pick-Up Address:</label>
                <input type="text" id="pickup_address" name="pickup_address" placeholder="Enter pick-up address"/>
            </div>


            <input type="submit" value="Confirm"/>

        </form>
    <script type="text/javascript">
        var productList = <t t-raw="json.dumps(product_templates)"/>;
        var product_template_variants = <t t-raw="json.dumps(product_template_variants)"/>;
        var addressList = <t t-raw="json.dumps(addresses)"/>;

        function populateAddressDropdown() {
            var dropdown = document.getElementById('delivery_address_dropdown');
            dropdown.innerHTML = `<option value="">Select an address...</option>`;
            addressList.forEach(function(address) {
                dropdown.innerHTML += `<option value="${address}">${address}</option>`;
            });
        }

        function addProductTemplate() {
            var container = document.getElementById('product_templates_container');
            var productTemplateDetail = document.createElement('div');
            productTemplateDetail.classList.add('product-template-detail');

            var controlsContainer = document.createElement('div');
            controlsContainer.classList.add('controls-container');

            var selectHTML = `<select class="product-select" name="product_id[]">
                                <option value="">Select a product...</option>`;
            productList.forEach(function(product) {
                selectHTML += `<option value="${product[0]}">${product[1]}</option>`;
            });
            selectHTML += `</select>`;

            controlsContainer.innerHTML = selectHTML +
                `<button type="button" onclick="removeProductTemplate(this)">Remove Product</button>`;

            var variantsContainer = document.createElement('div');
            variantsContainer.classList.add('variants-container');

            productTemplateDetail.appendChild(controlsContainer);
            productTemplateDetail.appendChild(variantsContainer);
            container.appendChild(productTemplateDetail);

            // Add button to add variants
            var addVariantButton = document.createElement('button');
            addVariantButton.type = 'button';
            addVariantButton.textContent = 'Add Variant';
            addVariantButton.onclick = function() { addVariantCombination(controlsContainer.querySelector('.product-select')) };
            productTemplateDetail.appendChild(addVariantButton);
        }

        function addVariantCombination(productSelect) {
            var templateId = productSelect.value;
            if (!templateId) return; // Exit if no product template is selected

            var productTemplateDetail = productSelect.closest('.product-template-detail');
            var variantsContainer = productTemplateDetail.querySelector('.variants-container');

            var variantCombination = document.createElement('div');
            variantCombination.classList.add('variant-combination');

            var attributeSelectHTML = `<select class="product-select" name="variant_id[]">
                                        <option value="">Select a product...</option>`;

            for (const [ii, element] of product_template_variants['product_template_id'].entries()) {
                if (element == templateId) {
                    var value = product_template_variants['product_product_id'][ii];
                    attributeSelectHTML += `<option value="${value}">${product_template_variants['product_product_str'][ii]}</option>`;
                }
            }
            attributeSelectHTML += `</select>`;

            // Add input fields for quantity and price
            var quantityInputHTML = `<input type="number" name="product_quantity[]" placeholder="Quantity [kg]" style="margin-left: 10px;"/>`;
            var priceInputHTML = `<input type="number" name="product_price[]" placeholder="Unit Price [USD]" style="margin-left: 10px;"/>`;

            variantCombination.innerHTML += attributeSelectHTML + quantityInputHTML + priceInputHTML +
                `<button type="button" onclick="removeVariantCombination(this)" style="margin-left: 10px;">Remove Variant</button>`;

            variantsContainer.appendChild(variantCombination);
        }

        function removeVariantCombination(button) {
            button.parentNode.remove();
        }

        function removeProductTemplate(button) {
            var productTemplateDetail = button.closest('.product-template-detail');
            productTemplateDetail.remove(); // This removes the entire product template section
        }

        // Call these functions to initialize the form
        window.onload = function() {
            populateAddressDropdown(); // Populate the address dropdown on load
            addProductTemplate(); // Add at least one product template dropdown on load
        };
    </script>
    <style>
        /* Existing styles */
        .product-detail {
            margin-bottom: 15px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        .product-detail input, .product-detail select {
            margin-right: 10px;
        }
        #product_details_section {
            margin-top: 20px;
        }
        .variant-combination {
            display: flex; /* Use flexbox to layout children inline */
            align-items: center; /* Align children vertically */
            margin-bottom: 10px; /* Margin at the bottom of each variant combination */
        }

        .variant-combination select {
            flex-grow: 1; /* Dropdown takes up the available space */
            margin-right: 10px; /* Margin between the dropdown and the button */
        }

        .variant-combination button {
            white-space: nowrap; /* Prevent the button text from wrapping */
        }

        .controls-container {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .controls-container select {
            flex-grow: 1;
            margin-right: 10px;
        }

        .controls-container button {
            white-space: nowrap;
        }
    </style>
    </template>
</odoo>
